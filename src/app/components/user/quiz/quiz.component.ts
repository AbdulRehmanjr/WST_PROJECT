import { Component } from '@angular/core';
import { Quiz } from 'src/app/classes/quiz';
import { Quizquestion } from 'src/app/classes/quizquestion';

@Component({
  selector: 'app-quiz',
  templateUrl: './quiz.component.html',
  styleUrls: ['./quiz.component.css']
})
export class QuizComponent {

   quiz: Quizquestion[] = [
    { description: "What is the difference between a dynamic and a static programming language?", option1: "Dynamic languages have a run-time binding of operations to objects, while static languages have a compile-time binding of operations to objects.", option2: "Dynamic languages are more powerful than static languages, while static languages are more efficient.", option3: "Dynamic languages are easier to learn and use than static languages, while static languages are more difficult but offer better performance.", option4: "Dynamic languages are generally used for web development, while static languages are generally used for system programming." },
    { description: "What is the most widely used programming language for web development?", option1: "JavaScript", option2: "PHP", option3: "Ruby", option4: "Java" },
    { description: "What is the main advantage of using an object-oriented programming language?", option1: "It enables you to model real-world objects and their relationships in your code, making it easier to understand, maintain, and extend your code.", option2: "It provides a standardized way of defining data structures and algorithms, making it easier to write, debug, and optimize your code.", option3: "It enables you to write code that is reusable, modular, and scalable, making it easier to build complex applications.", option4: "It allows you to write code that is more readable and maintainable, making it easier to collaborate with other developers." },
    { description: "What is the primary benefit of using a functional programming language?", option1: "It enables you to write code that is more concise and expressive, making it easier to reason about and maintain.", option2: "It provides a more declarative way of defining computations, making it easier to write, debug, and optimize your code.", option3: "It enables you to write code that is more modular and scalable, making it easier to build complex applications.", option4: "It allows you to write code that is more readable and maintainable, making it easier to collaborate with other developers." },
    { description: "What is the difference between a compiler and an interpreter?", option1: "A compiler translates the source code into machine code, which can then be executed directly by the machine, while an interpreter executes the source code directly without translating it into machine code.", option2: "A compiler generates code that is more efficient than code generated by an interpreter, while an interpreter generates code that is more flexible and easier to modify.", option3: "A compiler requires you to run a separate step to translate the source code into machine code, while an interpreter executes the source code directly as you run it.", option4: "A compiler is generally used for system programming, while an interpreter is generally used for scripting and web development." },
    { description: "What is the difference between a high-level programming language and a low-level programming language?", option1: "High-level programming languages are more abstract and closer to human language, while low-level programming languages are more closely tied to the underlying hardware and provide more direct control over the machine.", option2: "High-level programming languages are more efficient than low-level programming languages, while low-level programming languages are easier to learn and use.", option3: "High-level programming languages are generally used for web development, while low-level programming languages are generally used for system programming.", option4: "High-level programming languages provide more safety and error checking than low-level programming languages"}
  ]
}
